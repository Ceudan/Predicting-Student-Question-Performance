# -*- coding: utf-8 -*-
"""neural_network.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bnM-E6J-ADpWsRV6xFJ8ihuR5ScTtcKP
"""

# NOTE: To run this program you need to upload into sessional storage all the data files, as well as the utils.py file.
#       Upload them into the default location of "/content/".

from utils import *
from torch.autograd import Variable

import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import torch.utils.data

import numpy as np
import torch
import matplotlib.pyplot as plt 

import csv

def load_data(base_path="../data"):
    """ Load the data in PyTorch Tensor.

    :return: (zero_train_matrix, train_data, valid_data, test_data)
        WHERE:
        zero_train_matrix: 2D sparse matrix where missing entries are
        filled with 0.
        train_data: 2D sparse matrix
        valid_data: A dictionary {user_id: list,
        user_id: list, is_correct: list}
        test_data: A dictionary {user_id: list,
        user_id: list, is_correct: list}
    """
    train_matrix = load_train_sparse(base_path).toarray()
    valid_data = load_valid_csv(base_path)
    test_data = load_public_test_csv(base_path)

    zero_train_matrix = train_matrix.copy()
    # Fill in the missing entries to 0.
    zero_train_matrix[np.isnan(train_matrix)] = 0
    # Change to Float Tensor for PyTorch.
    zero_train_matrix = torch.FloatTensor(zero_train_matrix)
    train_matrix = torch.FloatTensor(train_matrix)

    return zero_train_matrix, train_matrix, valid_data, test_data

class AutoEncoder(nn.Module):
    def __init__(self, l1_size, l2_size, l3_size):
        """ Initialize a class AutoEncoder.
        :param num_question: int
        :param k: int
        """
        super(AutoEncoder, self).__init__()

        # Define linear functions.
        self.l1 = nn.Linear(l1_size, l2_size)
        self.l2 = nn.Linear(l2_size, l3_size)
        self.l3 = nn.Linear(l3_size, l2_size)
        self.l4 = nn.Linear(l2_size, l1_size)

    def get_weight_norm(self):
        """ Return ||W^1||^2 + ||W^2||^2.
        :return: float
        """
        norm1 = torch.norm(self.l1.weight, 2) ** 2
        norm2 = torch.norm(self.l2.weight, 2) ** 2
        norm3 = torch.norm(self.l3.weight, 2) ** 2
        norm4 = torch.norm(self.l4.weight, 2) ** 2

        return norm1+norm2+norm3+norm4

    def forward(self, inputs):
        """ Return a forward pass given inputs.
        :param inputs: user vector.
        :return: user vector.
        """
        #####################################################################
        # TODO:                                                             #
        # Implement the function as described in the docstring.             #
        # Use sigmoid activations for f and g.                              #
        #####################################################################
        #print(inputs)
        out = torch.relu(self.l1(inputs))
        out = torch.relu(self.l2(out))
        out = torch.relu(self.l3(out))
        out = torch.sigmoid(self.l4(out))
        #####################################################################
        #                       END OF YOUR CODE                            #
        #####################################################################
        return out

# I wrote this function myself to get the accuracy on training data. This was used to plot/access our training curve.

def get_train_acc(model,train_data, zero_train_data):
  num_questions = 0
  num_incorr_questions = 0

  num_student = train_data.shape[0]
  for user_id in range(num_student):
      inputs = Variable(zero_train_data[user_id]).unsqueeze(0)
      target = inputs.clone()
      output = model(inputs)

      # Mask the target to only compute the gradient of valid entries.
      nan_mask = np.isnan(train_data[user_id].unsqueeze(0).numpy())
      
      target[0][nan_mask] = output[0][nan_mask]

      output = np.squeeze(output.detach().numpy())
      target = np.squeeze(target.detach().numpy())

      questions = ~nan_mask
      num_questions = num_questions+questions.sum()
      incorrquestions = abs(output-target)>0.5
      #print("output",output)
      #print("target",target)
      num_incorr_questions = num_incorr_questions + incorrquestions.sum()

  #print(num_questions, num_incorr_questions)
  return (num_questions - num_incorr_questions)/num_questions

def train(model, lr, lamb, train_data, zero_train_data, valid_data, num_epoch):
    """ Train the neural network, where the objective also includes
    a regularizer.

    :param model: Module
    :param lr: float
    :param lamb: float
    :param train_data: 2D FloatTensor
    :param zero_train_data: 2D FloatTensor
    :param valid_data: Dict
    :param num_epoch: int
    :return: None
    """
    epochs = []
    losses = []
    valid_accs = []
    train_accs = []
    # TODO: Add a regularizer to the cost function. 
    
    # Tell PyTorch you are training the model.
    model.train()

    # Define optimizers and loss function.
    optimizer = optim.SGD(model.parameters(), lr=lr)
    num_student = train_data.shape[0]

    for epoch in range(0, num_epoch):
        train_loss = 0.

        for user_id in range(num_student):
            inputs = Variable(zero_train_data[user_id]).unsqueeze(0)
            target = inputs.clone()

            optimizer.zero_grad()
            output = model(inputs)

            # Mask the target to only compute the gradient of valid entries.
            nan_mask = np.isnan(train_data[user_id].unsqueeze(0).numpy())
            target[0][nan_mask] = output[0][nan_mask]

            loss = torch.sum((output - target) ** 2.)
            loss += model.get_weight_norm()*(lamb/2)
            loss.backward()

            train_loss += loss.item()
            optimizer.step()



        valid_acc = evaluate(model, zero_train_data, valid_data)
        train_acc = get_train_acc(model, train_data, zero_train_data)
        print("Epoch: {} \tTraining Cost: {:.6f}\t " " Train Acc: {}\t"
              "Valid Acc: {}".format(epoch, train_loss, train_acc, valid_acc))
        epochs.append(epoch)
        losses.append(train_loss)
        train_accs.append(train_acc)
        valid_accs.append(valid_acc)
    
    return epochs, losses, train_accs, valid_accs
    #####################################################################
    #                       END OF YOUR CODE                            #
    #####################################################################

def evaluate(model, train_data, valid_data):
    """ Evaluate the valid_data on the current model.

    :param model: Module
    :param train_data: 2D FloatTensor
    :param valid_data: A dictionary {user_id: list,
    question_id: list, is_correct: list}
    :return: float
    """
    # Tell PyTorch you are evaluating the model.
    model.eval()

    total = 0
    correct = 0

    for i, u in enumerate(valid_data["user_id"]):
        inputs = Variable(train_data[u]).unsqueeze(0)
        output = model(inputs)

        guess = output[0][valid_data["question_id"][i]].item() >= 0.5
        if guess == valid_data["is_correct"][i]:
            correct += 1
        total += 1
    return correct / float(total)

zero_train_matrix, train_matrix, valid_data, test_data = load_data("/content/")
#####################################################################
# TODO:                                                             #
# Try out 5 different k and select the best k using the             #
# validation set.                                                   #
#####################################################################
# Set model hyperparameters.
'''
model = AutoEncoder(1774,400,100)
num_epoch = 17
lr = 0.005
lamb = 0.01

#epochs, losses, train_accs, valid_accs = train(model, lr, lamb, train_matrix, zero_train_matrix,
      #valid_data, num_epoch)

#Getting Test Accuracy
test_accuracy = evaluate(model, zero_train_matrix, test_data)
print(test_accuracy)

#Plotting the Curves
plt.plot(losses, label='Train Loss', color='orange')
plt.title('Train Loss vs Epoch')
plt.xlabel('Epoch Number')
plt.ylabel('Train Loss')
plt.legend()
plt.show()


plt.plot(train_accs, label='Train Accuracy', color='orange')
plt.plot(valid_accs, label='Validation Accuracy', color='red')
plt.title('Accuracy vs Epoch')
plt.xlabel('Epoch Number')
plt.ylabel('Accuracy')
plt.legend()
plt.show()
'''
#####################################################################
#                       END OF YOUR CODE                            #
#####################################################################
